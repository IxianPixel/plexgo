overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/:/progress"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: updatePlayProgress
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var key string = "<value>"

                var time float64 = 6900.91

                var state string = "<value>"

                ctx := context.Background()
                res, err := s.UpdatePlayProgress(ctx, key, time, state)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hubs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getGlobalHubs
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var count *float64 = plexgo.Float64(1262.49)

                var onlyTransient *operations.OnlyTransient = operations.OnlyTransientOne.ToPointer()

                ctx := context.Background()
                res, err := s.GetGlobalHubs(ctx, count, onlyTransient)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hubs/sections/{sectionId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getLibraryHubs
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sectionID float64 = 6728.76

                var count *float64 = plexgo.Float64(9010.22)

                var onlyTransient *operations.QueryParamOnlyTransient = operations.QueryParamOnlyTransientZero.ToPointer()

                ctx := context.Background()
                res, err := s.GetLibraryHubs(ctx, sectionID, count, onlyTransient)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/updater/status"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getUpdateStatus
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetUpdateStatus(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/butler"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: startAllTasks
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.StartAllTasks(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/log"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: logLine
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var level operations.Level = operations.LevelThree

                var message string = "Test log message"

                var source string = "Postman"

                ctx := context.Background()
                res, err := s.LogLine(ctx, level, message, source)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getServerCapabilities
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetServerCapabilities(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/{playlistID}/items"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: addPlaylistContents
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistID float64 = 8502.01

                var uri string = "server://12345/com.plexapp.plugins.library/library/metadata/1"

                var playQueueID *float64 = plexgo.Float64(123)

                ctx := context.Background()
                res, err := s.AddPlaylistContents(ctx, playlistID, uri, playQueueID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/activities/{activityUUID}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: cancelServerActivities
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var activityUUID string = "<value>"

                ctx := context.Background()
                res, err := s.CancelServerActivities(ctx, activityUUID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/butler"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getButlerTasks
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetButlerTasks(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/sections"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getLibraries
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetLibraries(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/upload"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: uploadPlaylist
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var path string = "/home/barkley/playlist.m3u"

                var force operations.Force = operations.ForceZero

                ctx := context.Background()
                res, err := s.UploadPlaylist(ctx, path, force)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createPlaylist
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.CreatePlaylist(ctx, operations.CreatePlaylistRequest{
                    Title: "<value>",
                    Type: operations.QueryParamTypePhoto,
                    Smart: operations.SmartOne,
                    URI: "https://inborn-brochure.biz",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/{playlistID}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deletePlaylist
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistID float64 = 216.22

                ctx := context.Background()
                res, err := s.DeletePlaylist(ctx, playlistID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/transcode/sessions/{sessionKey}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: stopTranscodeSession
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sessionKey string = "zz7llzqlx8w9vnrsbnwhbmep"

                ctx := context.Background()
                res, err := s.StopTranscodeSession(ctx, sessionKey)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/search"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSearchResults
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var query string = "110"

                ctx := context.Background()
                res, err := s.GetSearchResults(ctx, query)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/recentlyAdded"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getRecentlyAdded
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetRecentlyAdded(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/sections/{sectionId}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getLibrary
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sectionID float64 = 1000

                var includeDetails *operations.IncludeDetails = operations.IncludeDetailsZero.ToPointer()

                ctx := context.Background()
                res, err := s.GetLibrary(ctx, sectionID, includeDetails)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/sections/{sectionId}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: deleteLibrary
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sectionID float64 = 1000

                ctx := context.Background()
                res, err := s.DeleteLibrary(ctx, sectionID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/sections/{sectionId}/search"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: searchLibrary
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sectionID int64 = 933505

                var type_ operations.Type = operations.TypeFour

                ctx := context.Background()
                res, err := s.SearchLibrary(ctx, sectionID, type_)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/onDeck"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getOnDeck
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetOnDeck(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/:/prefs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getServerPreferences
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetServerPreferences(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/clients"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getAvailableClients
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetAvailableClients(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/:/scrobble"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: markPlayed
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var key float64 = 59398

                ctx := context.Background()
                res, err := s.MarkPlayed(ctx, key)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/butler/{taskName}"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: stopTask
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var taskName operations.PathParamTaskName = operations.PathParamTaskNameBackupDatabase

                ctx := context.Background()
                res, err := s.StopTask(ctx, taskName)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hubs/search/voice"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: performVoiceSearch
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var query string = "dead+poop"

                var sectionID *float64 = plexgo.Float64(4094.8)

                var limit *float64 = plexgo.Float64(5)

                ctx := context.Background()
                res, err := s.PerformVoiceSearch(ctx, query, sectionID, limit)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/butler/{taskName}"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: startTask
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var taskName operations.TaskName = operations.TaskNameCleanOldBundles

                ctx := context.Background()
                res, err := s.StartTask(ctx, taskName)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/sections/{sectionId}/refresh"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: refreshLibrary
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sectionID float64 = 934.16

                ctx := context.Background()
                res, err := s.RefreshLibrary(ctx, sectionID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/metadata/{ratingKey}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getMetadata
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var ratingKey float64 = 8382.31

                ctx := context.Background()
                res, err := s.GetMetadata(ctx, ratingKey)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/{playlistID}/items"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPlaylistContents
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistID float64 = 5004.46

                var type_ float64 = 9403.59

                ctx := context.Background()
                res, err := s.GetPlaylistContents(ctx, playlistID, type_)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/transcode/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getTranscodeSessions
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetTranscodeSessions(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/identity"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getServerIdentity
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetServerIdentity(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/activities"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getServerActivities
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetServerActivities(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/sections/{sectionId}/{tag}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getLibraryItems
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var sectionID int64 = 451092

                var tag operations.Tag = operations.TagUnwatched

                ctx := context.Background()
                res, err := s.GetLibraryItems(ctx, sectionID, tag)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/metadata/{ratingKey}/children"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getMetadataChildren
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var ratingKey float64 = 1539.14

                ctx := context.Background()
                res, err := s.GetMetadataChildren(ctx, ratingKey)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/{playlistID}/items"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: clearPlaylistContents
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistID float64 = 1893.18

                ctx := context.Background()
                res, err := s.ClearPlaylistContents(ctx, playlistID)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/log"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: logMultiLine
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.LogMultiLine(ctx, "level=4&message=Test%20message%201&source=postman
            level=3&message=Test%20message%202&source=postman
            level=1&message=Test%20message%203&source=postman")
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/statistics/media"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getStatistics
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var timespan *int64 = plexgo.Int64(411769)

                ctx := context.Background()
                res, err := s.GetStatistics(ctx, timespan)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/status/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSessions
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetSessions(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/security/token"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getTransientToken
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var type_ operations.GetTransientTokenQueryParamType = operations.GetTransientTokenQueryParamTypeDelegation

                var scope operations.Scope = operations.ScopeAll

                ctx := context.Background()
                res, err := s.GetTransientToken(ctx, type_, scope)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/servers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getServerList
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetServerList(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/:/unscrobble"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: markUnplayed
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var key float64 = 59398

                ctx := context.Background()
                res, err := s.MarkUnplayed(ctx, key)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/butler"]["delete"]
    update:
      x-codeSamples:
        - lang: go
          label: stopAllTasks
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.StopAllTasks(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/hubs/search"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: performSearch
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var query string = "dylan"

                var sectionID *float64 = plexgo.Float64(1516.53)

                var limit *float64 = plexgo.Float64(5)

                ctx := context.Background()
                res, err := s.PerformSearch(ctx, query, sectionID, limit)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/log/networked"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: enablePaperTrail
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.EnablePaperTrail(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/devices"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getDevices
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetDevices(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/myplex/account"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getMyPlexAccount
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetMyPlexAccount(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/video/:/transcode/universal/start.mpd"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: startUniversalTranscode
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.StartUniversalTranscode(ctx, operations.StartUniversalTranscodeRequest{
                    HasMDE: 8924.99,
                    Path: "/etc/mail",
                    MediaIndex: 9962.95,
                    PartIndex: 1232.82,
                    Protocol: "<value>",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/pins/{pinID}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getToken
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var pinID string = "<value>"

                var xPlexClientIdentifier *string = plexgo.String("Postman")

                ctx := context.Background()
                res, err := s.GetToken(ctx, pinID, xPlexClientIdentifier)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/{playlistID}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPlaylist
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistID float64 = 4109.48

                ctx := context.Background()
                res, err := s.GetPlaylist(ctx, playlistID)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/library/hashes"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getFileHash
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var url_ string = "file://C:\Image.png&type=13"

                var type_ *float64 = plexgo.Float64(4462.17)

                ctx := context.Background()
                res, err := s.GetFileHash(ctx, url_, type_)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getPlaylists
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistType *operations.PlaylistType = operations.PlaylistTypeAudio.ToPointer()

                var smart *operations.QueryParamSmart = operations.QueryParamSmartZero.ToPointer()

                ctx := context.Background()
                res, err := s.GetPlaylists(ctx, playlistType, smart)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/playlists/{playlistID}"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: updatePlaylist
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var playlistID float64 = 3915

                var title *string = plexgo.String("<value>")

                var summary *string = plexgo.String("<value>")

                ctx := context.Background()
                res, err := s.UpdatePlaylist(ctx, playlistID, title, summary)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/updater/apply"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: applyUpdates
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var tonight *operations.Tonight = operations.TonightOne.ToPointer()

                var skip *operations.Skip = operations.SkipZero.ToPointer()

                ctx := context.Background()
                res, err := s.ApplyUpdates(ctx, tonight, skip)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/security/resources"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSourceConnectionInformation
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var source string = "server://client-identifier"

                ctx := context.Background()
                res, err := s.GetSourceConnectionInformation(ctx, source)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/photo/:/transcode"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getResizedPhoto
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetResizedPhoto(ctx, operations.GetResizedPhotoRequest{
                    Width: 110,
                    Height: 165,
                    Opacity: 100,
                    Blur: 20,
                    MinSize: operations.MinSizeOne,
                    Upscale: operations.UpscaleZero,
                    URL: "/library/metadata/49564/thumb/1654258204",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/:/timeline"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getTimeline
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetTimeline(ctx, operations.GetTimelineRequest{
                    RatingKey: 716.56,
                    Key: "<key>",
                    State: operations.StatePaused,
                    HasMDE: 7574.33,
                    Time: 3327.51,
                    Duration: 7585.39,
                    Context: "<value>",
                    PlayQueueItemID: 1406.21,
                    PlayBackTime: 2699.34,
                    Row: 3536.42,
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/pins"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: getPin
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var strong *bool = plexgo.Bool(false)

                var xPlexClientIdentifier *string = plexgo.String("Postman")

                ctx := context.Background()
                res, err := s.GetPin(ctx, strong, xPlexClientIdentifier)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/status/sessions/history/all"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getSessionHistory
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )

                ctx := context.Background()
                res, err := s.GetSessionHistory(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/updater/check"]["put"]
    update:
      x-codeSamples:
        - lang: go
          label: checkForUpdates
          source: |-
            package main

            import(
            	"github.com/LukeHagar/plexgo/models/components"
            	"github.com/LukeHagar/plexgo"
            	"github.com/LukeHagar/plexgo/models/operations"
            	"context"
            	"log"
            )

            func main() {
                s := plexgo.New(
                    plexgo.WithSecurity("<YOUR_API_KEY_HERE>"),
                    plexgo.WithXPlexClientIdentifier("Postman"),
                )


                var download *operations.Download = operations.DownloadOne.ToPointer()

                ctx := context.Background()
                res, err := s.CheckForUpdates(ctx, download)
                if err != nil {
                    log.Fatal(err)
                }
                if res != nil {
                    // handle response
                }
            }
