/*
Plex-API

An Open API Spec for interacting with Plex.tv

API version: 0.0.3
Contact: Lukeslakemail@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plextv

import (
	"encoding/json"
)

// checks if the GetGeoData200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGeoData200Response{}

// GetGeoData200Response struct for GetGeoData200Response
type GetGeoData200Response struct {
	Id interface{} `json:"id,omitempty"`
	Name interface{} `json:"name,omitempty"`
	GuestUserID interface{} `json:"guestUserID,omitempty"`
	GuestUserUUID interface{} `json:"guestUserUUID,omitempty"`
	GuestEnabled interface{} `json:"guestEnabled,omitempty"`
	Subscription interface{} `json:"subscription,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetGeoData200Response GetGeoData200Response

// NewGetGeoData200Response instantiates a new GetGeoData200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGeoData200Response() *GetGeoData200Response {
	this := GetGeoData200Response{}
	return &this
}

// NewGetGeoData200ResponseWithDefaults instantiates a new GetGeoData200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGeoData200ResponseWithDefaults() *GetGeoData200Response {
	this := GetGeoData200Response{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGeoData200Response) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGeoData200Response) GetIdOk() (*interface{}, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetGeoData200Response) HasId() bool {
	if o != nil && isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *GetGeoData200Response) SetId(v interface{}) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGeoData200Response) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGeoData200Response) GetNameOk() (*interface{}, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetGeoData200Response) HasName() bool {
	if o != nil && isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *GetGeoData200Response) SetName(v interface{}) {
	o.Name = v
}

// GetGuestUserID returns the GuestUserID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGeoData200Response) GetGuestUserID() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GuestUserID
}

// GetGuestUserIDOk returns a tuple with the GuestUserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGeoData200Response) GetGuestUserIDOk() (*interface{}, bool) {
	if o == nil || isNil(o.GuestUserID) {
		return nil, false
	}
	return &o.GuestUserID, true
}

// HasGuestUserID returns a boolean if a field has been set.
func (o *GetGeoData200Response) HasGuestUserID() bool {
	if o != nil && isNil(o.GuestUserID) {
		return true
	}

	return false
}

// SetGuestUserID gets a reference to the given interface{} and assigns it to the GuestUserID field.
func (o *GetGeoData200Response) SetGuestUserID(v interface{}) {
	o.GuestUserID = v
}

// GetGuestUserUUID returns the GuestUserUUID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGeoData200Response) GetGuestUserUUID() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GuestUserUUID
}

// GetGuestUserUUIDOk returns a tuple with the GuestUserUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGeoData200Response) GetGuestUserUUIDOk() (*interface{}, bool) {
	if o == nil || isNil(o.GuestUserUUID) {
		return nil, false
	}
	return &o.GuestUserUUID, true
}

// HasGuestUserUUID returns a boolean if a field has been set.
func (o *GetGeoData200Response) HasGuestUserUUID() bool {
	if o != nil && isNil(o.GuestUserUUID) {
		return true
	}

	return false
}

// SetGuestUserUUID gets a reference to the given interface{} and assigns it to the GuestUserUUID field.
func (o *GetGeoData200Response) SetGuestUserUUID(v interface{}) {
	o.GuestUserUUID = v
}

// GetGuestEnabled returns the GuestEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGeoData200Response) GetGuestEnabled() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GuestEnabled
}

// GetGuestEnabledOk returns a tuple with the GuestEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGeoData200Response) GetGuestEnabledOk() (*interface{}, bool) {
	if o == nil || isNil(o.GuestEnabled) {
		return nil, false
	}
	return &o.GuestEnabled, true
}

// HasGuestEnabled returns a boolean if a field has been set.
func (o *GetGeoData200Response) HasGuestEnabled() bool {
	if o != nil && isNil(o.GuestEnabled) {
		return true
	}

	return false
}

// SetGuestEnabled gets a reference to the given interface{} and assigns it to the GuestEnabled field.
func (o *GetGeoData200Response) SetGuestEnabled(v interface{}) {
	o.GuestEnabled = v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGeoData200Response) GetSubscription() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGeoData200Response) GetSubscriptionOk() (*interface{}, bool) {
	if o == nil || isNil(o.Subscription) {
		return nil, false
	}
	return &o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *GetGeoData200Response) HasSubscription() bool {
	if o != nil && isNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given interface{} and assigns it to the Subscription field.
func (o *GetGeoData200Response) SetSubscription(v interface{}) {
	o.Subscription = v
}

func (o GetGeoData200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGeoData200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.GuestUserID != nil {
		toSerialize["guestUserID"] = o.GuestUserID
	}
	if o.GuestUserUUID != nil {
		toSerialize["guestUserUUID"] = o.GuestUserUUID
	}
	if o.GuestEnabled != nil {
		toSerialize["guestEnabled"] = o.GuestEnabled
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetGeoData200Response) UnmarshalJSON(bytes []byte) (err error) {
	varGetGeoData200Response := _GetGeoData200Response{}

	if err = json.Unmarshal(bytes, &varGetGeoData200Response); err == nil {
		*o = GetGeoData200Response(varGetGeoData200Response)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "guestUserID")
		delete(additionalProperties, "guestUserUUID")
		delete(additionalProperties, "guestEnabled")
		delete(additionalProperties, "subscription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetGeoData200Response struct {
	value *GetGeoData200Response
	isSet bool
}

func (v NullableGetGeoData200Response) Get() *GetGeoData200Response {
	return v.value
}

func (v *NullableGetGeoData200Response) Set(val *GetGeoData200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGeoData200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGeoData200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGeoData200Response(val *GetGeoData200Response) *NullableGetGeoData200Response {
	return &NullableGetGeoData200Response{value: val, isSet: true}
}

func (v NullableGetGeoData200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGeoData200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


