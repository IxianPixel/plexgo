openapi: 3.1.0
info:
  contact:
    email: Lukeslakemail@gmail.com
    name: Luke Hagar
    url: https://www.LukeHagar.com
  description: An Open API Spec for interacting with Plex.tv and Plex Servers
  license:
    name: MIT
  title: Plex-API
  version: 0.0.3
servers:
- description: The full address of your Plex Server
  url: "{protocol}://{ip}:{port}"
  variables:
    protocol:
      default: http
      description: The protocol to use when connecting to your plex server.
      enum:
      - http
      - https
    ip:
      default: 10.10.10.47
      description: The Local IP Address of your plex server.
    port:
      default: "32400"
      description: The port to access your plex server.
security:
- accessToken: []
tags:
- description: |
    Activities are awesome. They provide a way to monitor and control asynchronous operations on the server. In order to receive real-time updates for activities, a client would normally subscribe via either EventSource or Websocket endpoints.
    Activities are associated with HTTP replies via a special `X-Plex-Activity` header which contains the UUID of the activity.
    Activities are optional cancellable. If cancellable, they may be cancelled via the `DELETE` endpoint. Other details:
    - They can contain a `progress` (from 0 to 100) marking the percent completion of the activity.
    - They must contain an `type` which is used by clients to distinguish the specific activity.
    - They may contain a `Context` object with attributes which associate the activity with various specific entities (items, libraries, etc.)
    - The may contain a `Response` object which attributes which represent the result of the asynchronous operation.
  name: Activities
- description: |
    API Calls regarding authentication for Plex Media Server
  name: Authentication
- description: |
    Butler is the task manager of the Plex Media Server Ecosystem.
  name: Butler
- description: |
    Operations against the Plex Media Server System.
  name: Server
- description: |
    This describes the API for searching and applying updates to the Plex Media Server.
    Updates to the status can be observed via the Event API.
  name: Updater
- description: |
    Submit logs to the Log Handler for Plex Media Server
  name: Log
- description: |
    API Calls against Security for Plex Media Server
  name: Security
- description: |
    API Calls interacting with Plex Media Server Libraries
  name: Library
- description: |
    API Calls interacting with Plex Media Server Media
  name: Media
- description: |
    Hubs are a structured two-dimensional container for media, generally represented by multiple horizontal rows.
  name: Hubs
- description: "Playlists are ordered collections of media. They can be dumb (just\
    \ a list of media) or smart (based on a media query, such as \"all albums from\
    \ 2017\"). \nThey can be organized in (optionally nesting) folders.\nRetrieving\
    \ a playlist, or its items, will trigger a refresh of its metadata. \nThis may\
    \ cause the duration and number of items to change.\n"
  name: Playlists
- description: |
    API Calls that perform search operations with Plex Media Server
  name: Search
- description: |
    API Calls that perform search operations with Plex Media Server Sessions
  name: Sessions
- description: |
    API Calls that perform operations with Plex Media Server Users
  name: User
- description: |
    API Calls that perform operations with Plex Media Server Video
  name: Video
paths:
  /:
    get:
      description: Server Capabilities
      operationId: getServerCapabilities
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_200_response'
          description: The Server Capabilities
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Server Capabilities
      tags:
      - Server
  /:/prefs:
    get:
      description: Get Server Preferences
      operationId: getServerPreferences
      responses:
        "200":
          description: Server Preferences
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Server Preferences
      tags:
      - Server
  /:/scrobble:
    get:
      description: This will mark the provided media key as Played.
      operationId: markPlayed
      parameters:
      - description: The media key to mark as played
        explode: true
        in: query
        name: key
        required: true
        schema:
          example: 59398
        style: form
      responses:
        "200":
          description: Media is marked Played
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Mark Media Played
      tags:
      - Media
  /:/unscrobble:
    get:
      description: This will mark the provided media key as Unplayed.
      operationId: markUnplayed
      parameters:
      - description: The media key to mark as Unplayed
        explode: true
        in: query
        name: key
        required: true
        schema:
          example: 59398
        style: form
      responses:
        "200":
          description: Media is marked Unplayed
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Mark Media Unplayed
      tags:
      - Media
  /:/progress:
    post:
      description: |
        This API command can be used to update the play progress of a media item.
      operationId: updatePlayProgress
      parameters:
      - description: the media key
        explode: true
        in: query
        name: key
        required: true
        schema: {}
        style: form
      - description: "The time, in milliseconds, used to set the media playback progress."
        example: 90000
        explode: true
        in: query
        name: time
        required: true
        schema: {}
        style: form
      - description: The playback state of the media item.
        example: played
        explode: true
        in: query
        name: state
        required: true
        schema: {}
        style: form
      responses:
        "200":
          description: Success - The request was successful.
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Update Media Play Progress
      tags:
      - Media
  /activities:
    get:
      description: Get Server Activities
      operationId: getServerActivities
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerActivities_200_response'
          description: The Server Activities
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Server Activities
      tags:
      - Activities
  /activities/{activityUUID}:
    delete:
      description: Cancel Server Activities
      operationId: cancelServerActivities
      parameters:
      - description: The UUID of the activity to cancel.
        example: 25b71ed5-0f9d-461c-baa7-d404e9e10d3e
        explode: false
        in: path
        name: activityUUID
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The Server Activity was canceled
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Cancel Server Activities
      tags:
      - Activities
  /butler:
    delete:
      description: |
        This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
      operationId: stopAllTasks
      responses:
        "200":
          description: All tasks were stopped
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Stop all Butler tasks
      tags:
      - Butler
    get:
      description: Returns a list of butler tasks
      operationId: getButlerTasks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getButlerTasks_200_response'
          description: All butler tasks
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Butler tasks
      tags:
      - Butler
    post:
      description: |
        This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
        1. Any tasks not scheduled to run on the current day will be skipped.
        2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
        3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
        4. If we are outside the configured window, the task will start immediately.
      operationId: startAllTasks
      responses:
        "200":
          description: All tasks were started
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Start all Butler tasks
      tags:
      - Butler
  /butler/{taskName}:
    delete:
      description: |
        This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
      operationId: stopTask
      parameters:
      - description: The name of the task to be started.
        explode: false
        in: path
        name: taskName
        required: true
        schema:
          enum:
          - BackupDatabase
          - BuildGracenoteCollections
          - CheckForUpdates
          - CleanOldBundles
          - CleanOldCacheFiles
          - DeepMediaAnalysis
          - GenerateAutoTags
          - GenerateChapterThumbs
          - GenerateMediaIndexFiles
          - OptimizeDatabase
          - RefreshLibraries
          - RefreshLocalMedia
          - RefreshPeriodicMetadata
          - UpgradeMediaAnalysis
        style: simple
      responses:
        "200":
          description: The task was stopped
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
        "404":
          description: The task was not running
      summary: Stop a single Butler task
      tags:
      - Butler
    post:
      description: |
        This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
        1. Any tasks not scheduled to run on the current day will be skipped.
        2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
        3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
        4. If we are outside the configured window, the task will start immediately.
      operationId: startTask
      parameters:
      - description: the name of the task to be started.
        explode: false
        in: path
        name: taskName
        required: true
        schema:
          enum:
          - BackupDatabase
          - BuildGracenoteCollections
          - CheckForUpdates
          - CleanOldBundles
          - CleanOldCacheFiles
          - DeepMediaAnalysis
          - GenerateAutoTags
          - GenerateChapterThumbs
          - GenerateMediaIndexFiles
          - OptimizeDatabase
          - RefreshLibraries
          - RefreshLocalMedia
          - RefreshPeriodicMetadata
          - UpgradeMediaAnalysis
        style: simple
      responses:
        "200":
          description: The task was started successfully
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
        "202":
          description: The task was already running.
      summary: Start a single Butler task
      tags:
      - Butler
  /clients:
    get:
      description: Get Available Clients
      operationId: getAvailableClients
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    MediaContainer:
                      properties:
                        size:
                          example: 1
                        Server:
                          items:
                            properties:
                              name:
                                example: iPad
                              host:
                                example: 10.10.10.102
                              address:
                                example: 10.10.10.102
                              port:
                                example: 32500
                              machineIdentifier:
                                example: A2E901F8-E016-43A7-ADFB-EF8CA8A4AC05
                              version:
                                example: "8.17"
                              protocol:
                                example: plex
                              product:
                                example: Plex for iOS
                              deviceClass:
                                example: tablet
                              protocolVersion:
                                example: 2
                              protocolCapabilities:
                                example: "playback,playqueues,timeline,provider-playback"
          description: Available Clients
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Available Clients
      tags:
      - Server
  /devices:
    get:
      description: Get Devices
      operationId: getDevices
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDevices_200_response'
          description: Devices
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Devices
      tags:
      - Server
  /hubs:
    get:
      description: Get Global Hubs filtered by the parameters provided.
      operationId: getGlobalHubs
      parameters:
      - description: The number of items to return with each hub.
        explode: true
        in: query
        name: count
        required: false
        schema: {}
        style: form
      - description: "Only return hubs which are \"transient\", meaning those which\
          \ are prone to changing after media playback or addition (e.g. On Deck,\
          \ or Recently Added)."
        explode: true
        in: query
        name: onlyTransient
        required: false
        schema:
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: returns global hubs
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Global Hubs
      tags:
      - Hubs
  /hubs/search:
    get:
      description: |
        This endpoint performs a search across all library sections, or a single section, and returns matches as hubs, split up by type. It performs spell checking, looks for partial matches, and orders the hubs based on quality of results. In addition, based on matches, it will return other related matches (e.g. for a genre match, it may return movies in that genre, or for an actor match, movies with that actor).

        In the response's items, the following extra attributes are returned to further describe or disambiguate the result:

        - `reason`: The reason for the result, if not because of a direct search term match; can be either:
          - `section`: There are multiple identical results from different sections.
          - `originalTitle`: There was a search term match from the original title field (sometimes those can be very different or in a foreign language).
          - `<hub identifier>`: If the reason for the result is due to a result in another hub, the source hub identifier is returned. For example, if the search is for "dylan" then Bob Dylan may be returned as an artist result, an a few of his albums returned as album results with a reason code of `artist` (the identifier of that particular hub). Or if the search is for "arnold", there might be movie results returned with a reason of `actor`
        - `reasonTitle`: The string associated with the reason code. For a section reason, it'll be the section name; For a hub identifier, it'll be a string associated with the match (e.g. `Arnold Schwarzenegger` for movies which were returned because the search was for "arnold").
        - `reasonID`: The ID of the item associated with the reason for the result. This might be a section ID, a tag ID, an artist ID, or a show ID.

        This request is intended to be very fast, and called as the user types.
      operationId: performSearch
      parameters:
      - description: The query term
        explode: true
        in: query
        name: query
        required: true
        schema: {}
        style: form
      - description: "This gives context to the search, and can result in re-ordering\
          \ of search result hubs"
        explode: true
        in: query
        name: sectionId
        required: false
        schema: {}
        style: form
      - description: The number of items to return per hub
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 3
          example: 5
        style: form
      responses:
        "200":
          description: The search results
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Perform a search
      tags:
      - Search
  /hubs/search/voice:
    get:
      description: "This endpoint performs a search specifically tailored towards\
        \ voice or other imprecise input which may work badly with the substring and\
        \ spell-checking heuristics used by the `/hubs/search` endpoint. \nIt uses\
        \ a [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance)\
        \ heuristic to search titles, and as such is much slower than the other search\
        \ endpoint. \nWhenever possible, clients should limit the search to the appropriate\
        \ type. \nResults, as well as their containing per-type hubs, contain a `distance`\
        \ attribute which can be used to judge result quality.\n"
      operationId: performVoiceSearch
      parameters:
      - description: The query term
        explode: true
        in: query
        name: query
        required: true
        schema: {}
        style: form
      - description: "This gives context to the search, and can result in re-ordering\
          \ of search result hubs"
        explode: true
        in: query
        name: sectionId
        required: false
        schema: {}
        style: form
      - description: The number of items to return per hub
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 3
          example: 5
        style: form
      responses:
        "200":
          description: The search results
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Perform a voice search
      tags:
      - Search
  /hubs/sections/{sectionId}:
    get:
      description: |
        This endpoint will return a list of library specific hubs
      operationId: getLibraryHubs
      parameters:
      - description: the Id of the library to query
        explode: false
        in: path
        name: sectionId
        required: true
        schema: {}
        style: simple
      - description: The number of items to return with each hub.
        explode: true
        in: query
        name: count
        required: false
        schema: {}
        style: form
      - description: "Only return hubs which are \"transient\", meaning those which\
          \ are prone to changing after media playback or addition (e.g. On Deck,\
          \ or Recently Added)."
        explode: true
        in: query
        name: onlyTransient
        required: false
        schema:
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: The hubs specific to the library
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get library specific hubs
      tags:
      - Hubs
  /identity:
    get:
      description: Get Server Identity
      operationId: getServerIdentity
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerIdentity_200_response'
          description: The Transcode Sessions
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Server Identity
      tags:
      - Server
  /library/hashes:
    get:
      description: This resource returns hash values for local files
      operationId: getFileHash
      parameters:
      - description: "This is the path to the local file, must be prefixed by `file://`"
        explode: true
        in: query
        name: url
        required: true
        schema:
          example: file://C:\Image.png&type=13
        style: form
      - description: Item type
        explode: true
        in: query
        name: type
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: The hash of the file
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Hash Value
      tags:
      - Library
  /library/recentlyAdded:
    get:
      description: |
        This endpoint will return the recently added content.
      operationId: getRecentlyAdded
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRecentlyAdded_200_response'
          description: The recently added content
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Recently Added
      tags:
      - Library
  /library/sections:
    get:
      description: "A library section (commonly referred to as just a library) is\
        \ a collection of media. \nLibraries are typed, and depending on their type\
        \ provide either a flat or a hierarchical view of the media. \nFor example,\
        \ a music library has an artist > albums > tracks structure, whereas a movie\
        \ library is flat.\n\nLibraries have features beyond just being a collection\
        \ of media; for starters, they include information about supported types,\
        \ filters and sorts. \nThis allows a client to provide a rich interface around\
        \ the media (e.g. allow sorting movies by release year).\n"
      operationId: getLibraries
      responses:
        "200":
          description: The libraries available on the Server
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get All Libraries
      tags:
      - Library
  /library/sections/{sectionId}:
    delete:
      description: Delate a library using a specific section
      operationId: deleteLibrary
      parameters:
      - description: the Id of the library to query
        explode: false
        in: path
        name: sectionId
        required: true
        schema:
          example: 1000
        style: simple
      responses:
        "200":
          description: The library is deleted
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Delete Library Section
      tags:
      - Library
    get:
      description: |
        Returns details for the library. This can be thought of as an interstitial endpoint because it contains information about the library, rather than content itself. These details are:

        - A list of `Directory` objects: These used to be used by clients to build a menuing system. There are four flavors of directory found here:
          - Primary: (e.g. all, On Deck) These are still used in some clients to provide "shortcuts" to subsets of media. However, with the exception of On Deck, all of them can be created by media queries, and the desire is to allow these to be customized by users.
          - Secondary: These are marked with `secondary="1"` and were used by old clients to provide nested menus allowing for primative (but structured) navigation.
          - Special: There is a By Folder entry which allows browsing the media by the underlying filesystem structure, and there's a completely obsolete entry marked `search="1"` which used to be used to allow clients to build search dialogs on the fly.
        - A list of `Type` objects: These represent the types of things found in this library, and for each one, a list of `Filter` and `Sort` objects. These can be used to build rich controls around a grid of media to allow filtering and organizing. Note that these filters and sorts are optional, and without them, the client won't render any filtering controls. The `Type` object contains:
          - `key`: This provides the root endpoint returning the actual media list for the type.
          - `type`: This is the metadata type for the type (if a standard Plex type).
          - `title`: The title for for the content of this type (e.g. "Movies").
        - Each `Filter` object contains a description of the filter. Note that it is not an exhaustive list of the full media query language, but an inportant subset useful for top-level API.
          - `filter`: This represents the filter name used for the filter, which can be used to construct complex media queries with.
          - `filterType`: This is either `string`, `integer`, or `boolean`, and describes the type of values used for the filter.
          - `key`: This provides the endpoint where the possible range of values for the filter can be retrieved (e.g. for a "Genre" filter, it returns a list of all the genres in the library). This will include a `type` argument that matches the metadata type of the Type element.
          - `title`: The title for the filter.
        - Each `Sort` object contains a description of the sort field.
          - `defaultDirection`: Can be either `asc` or `desc`, and specifies the default direction for the sort field (e.g. titles default to alphabetically ascending).
          - `descKey` and `key`: Contains the parameters passed to the `sort=...` media query for each direction of the sort.
          - `title`: The title of the field.
      operationId: getLibrary
      parameters:
      - description: the Id of the library to query
        explode: false
        in: path
        name: sectionId
        required: true
        schema:
          example: 1000
        style: simple
      - description: "Whether or not to include details for a section (types, filters,\
          \ and sorts). \nOnly exists for backwards compatibility, media providers\
          \ other than the server libraries have it on always.\n"
        explode: true
        in: query
        name: includeDetails
        required: false
        schema:
          default: 0
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: The details of the library
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Library Details
      tags:
      - Library
  /library/sections/{sectionId}/all:
    get:
      description: |
        This endpoint will return a list of library items filtered by the filter and type provided
      operationId: getLibraryItems
      parameters:
      - description: the Id of the library to query
        explode: false
        in: path
        name: sectionId
        required: true
        schema: {}
        style: simple
      - description: item type
        explode: true
        in: query
        name: type
        required: false
        schema: {}
        style: form
      - description: the filter parameter
        explode: true
        in: query
        name: filter
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: The details of the library
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Library Items
      tags:
      - Library
  /library/sections/{sectionId}/refresh:
    get:
      description: |
        This endpoint Refreshes the library.
      operationId: refreshLibrary
      parameters:
      - description: the Id of the library to refresh
        explode: false
        in: path
        name: sectionId
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The library is refreshing
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Refresh Library
      tags:
      - Library
  /library/sections/{sectionId}/latest:
    get:
      description: |
        This endpoint will return a list of the latest library items filtered by the filter and type provided
      operationId: getLatestLibraryItems
      parameters:
      - description: the Id of the library to query
        explode: false
        in: path
        name: sectionId
        required: true
        schema: {}
        style: simple
      - description: item type
        explode: true
        in: query
        name: type
        required: true
        schema: {}
        style: form
      - description: the filter parameter
        explode: true
        in: query
        name: filter
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: The details of the library
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Latest Library Items
      tags:
      - Library
  /library/sections/{sectionId}/common:
    get:
      description: |
        Represents a "Common" item. It contains only the common attributes of the items selected by the provided filter
      operationId: getCommonLibraryItems
      parameters:
      - description: the Id of the library to query
        explode: false
        in: path
        name: sectionId
        required: true
        schema: {}
        style: simple
      - description: item type
        explode: true
        in: query
        name: type
        required: true
        schema: {}
        style: form
      - description: the filter parameter
        explode: true
        in: query
        name: filter
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: The details of the library
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
        "404":
          description: In response to a non-existant sectionId.
      summary: Get Common Library Items
      tags:
      - Library
  /library/metadata/{ratingKey}:
    get:
      description: |
        This endpoint will return the metadata of a library item specified with the ratingKey.
      operationId: getMetadata
      parameters:
      - description: the id of the library item to return the children of.
        explode: false
        in: path
        name: ratingKey
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The children of the library item.
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Items Metadata
      tags:
      - Library
  /library/metadata/{ratingKey}/children:
    get:
      description: |
        This endpoint will return the children of of a library item specified with the ratingKey.
      operationId: getMetadataChildren
      parameters:
      - description: the id of the library item to return the children of.
        explode: false
        in: path
        name: ratingKey
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The children of the library item.
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Items Children
      tags:
      - Library
  /library/onDeck:
    get:
      description: |
        This endpoint will return the on deck content.
      operationId: getOnDeck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOnDeck_200_response'
          description: The on Deck content
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get On Deck
      tags:
      - Library
  /log:
    get:
      description: |
        This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
      operationId: logLine
      parameters:
      - description: "An integer log level to write to the PMS log with.  \n0: Error\
          \  \n1: Warning  \n2: Info \n3: Debug  \n4: Verbose\n"
        explode: true
        in: query
        name: level
        required: true
        schema:
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
        style: form
      - description: The text of the message to write to the log.
        explode: true
        in: query
        name: message
        required: true
        schema:
          example: ""
        style: form
      - description: a string indicating the source of the message.
        explode: true
        in: query
        name: source
        required: true
        schema:
          example: ""
        style: form
      responses:
        "200":
          description: Log Line submitted successfully
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Logging a single line message.
      tags:
      - Log
    post:
      description: |
        This endpoint will write multiple lines to the main Plex Media Server log in a single request. It takes a set of query strings as would normally sent to the above GET endpoint as a linefeed-separated block of POST data. The parameters for each query string match as above.
      operationId: logMultiLine
      responses:
        "200":
          description: Multi-Line Log Message Posted successfully
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Logging a multi-line message
      tags:
      - Log
  /log/networked:
    get:
      description: |
        This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
      operationId: enablePaperTrail
      responses:
        "200":
          description: Papertrail enabled successfully
        "403":
          description: the user was not signed in
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Enabling Papertrail
      tags:
      - Log
  /myplex/account:
    get:
      description: Returns MyPlex Account Information
      operationId: getMyPlexAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMyPlexAccount_200_response'
          description: MyPlex Account
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get MyPlex Account
      tags:
      - Server
  /photo/:/transcode:
    get:
      description: |
        Plex's Photo transcoder is used throughout the service to serve images at specified sizes.
      operationId: getResizedPhoto
      parameters:
      - description: The width for the resized photo
        explode: true
        in: query
        name: width
        required: true
        schema:
          example: 110
        style: form
      - description: The height for the resized photo
        explode: true
        in: query
        name: height
        required: true
        schema:
          example: 165
        style: form
      - description: The opacity for the resized photo
        explode: true
        in: query
        name: opacity
        required: true
        schema:
          default: 100
          maximum: 100
          minimum: 1
        style: form
      - description: The width for the resized photo
        explode: true
        in: query
        name: blur
        required: true
        schema: {}
        style: form
      - description: images are always scaled proportionally. A value of '1' in minSize
          will make the smaller native dimension the dimension resized against.
        explode: true
        in: query
        name: minSize
        required: true
        schema:
          enum:
          - 0
          - 1
        style: form
      - description: allow images to be resized beyond native dimensions.
        explode: true
        in: query
        name: upscale
        required: true
        schema:
          enum:
          - 0
          - 1
        style: form
      - description: path to image within Plex
        explode: true
        in: query
        name: url
        required: true
        schema:
          example: /library/metadata/49564/thumb/1654258204
        style: form
      responses:
        "200":
          description: Resized Image
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get a Resized Photo
      tags:
      - Server
  /playlists:
    post:
      description: |
        Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass:
        - `uri` - The content URI for what we're playing (e.g. `library://...`).
        - `playQueueID` - To create a playlist from an existing play queue.
      operationId: createPlaylist
      parameters:
      - description: name of the playlist
        explode: true
        in: query
        name: title
        required: true
        schema: {}
        style: form
      - description: type of playlist to create
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - audio
          - video
          - photo
        style: form
      - description: whether the playlist is smart or not
        explode: true
        in: query
        name: smart
        required: true
        schema:
          enum:
          - 0
          - 1
        style: form
      - description: the content URI for the playlist
        explode: true
        in: query
        name: uri
        required: false
        schema: {}
        style: form
      - description: the play queue to copy to a playlist
        explode: true
        in: query
        name: playQueueID
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: returns all playlists
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Create a Playlist
      tags:
      - Playlists
  /playlists/all:
    get:
      description: Get All Playlists given the specified filters.
      operationId: getPlaylists
      parameters:
      - description: limit to a type of playlist.
        explode: true
        in: query
        name: playlistType
        required: false
        schema:
          enum:
          - audio
          - video
          - photo
        style: form
      - description: type of playlists to return (default is all).
        explode: true
        in: query
        name: smart
        required: false
        schema:
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: returns all playlists
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get All Playlists
      tags:
      - Playlists
  /playlists/{playlistID}:
    delete:
      description: |
        This endpoint will delete a playlist
      operationId: deletePlaylist
      parameters:
      - description: the ID of the playlist
        explode: false
        in: path
        name: playlistID
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The playlist is deleted
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Deletes a Playlist
      tags:
      - Playlists
    get:
      description: |
        Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item:
        Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
      operationId: getPlaylist
      parameters:
      - description: the ID of the playlist
        explode: false
        in: path
        name: playlistID
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The playlist
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Retrieve Playlist
      tags:
      - Playlists
    put:
      description: |
        From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
      operationId: updatePlaylist
      parameters:
      - description: the ID of the playlist
        explode: false
        in: path
        name: playlistID
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The playlist is deleted
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Update a Playlist
      tags:
      - Playlists
  /playlists/{playlistID}/items:
    delete:
      description: |
        Clears a playlist, only works with dumb playlists. Returns the playlist.
      operationId: clearPlaylistContents
      parameters:
      - description: the ID of the playlist
        explode: false
        in: path
        name: playlistID
        required: true
        schema: {}
        style: simple
      responses:
        "200":
          description: The playlist contents are cleared
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Delete Playlist Contents
      tags:
      - Playlists
    get:
      description: "Gets the contents of a playlist. Should be paged by clients via\
        \ standard mechanisms. \nBy default leaves are returned (e.g. episodes, movies).\
        \ In order to return other types you can use the `type` parameter. \nFor example,\
        \ you could use this to display a list of recently added albums vis a smart\
        \ playlist. \nNote that for dumb playlists, items have a `playlistItemID`\
        \ attribute which is used for deleting or moving items.\n"
      operationId: getPlaylistContents
      parameters:
      - description: the ID of the playlist
        explode: false
        in: path
        name: playlistID
        required: true
        schema: {}
        style: simple
      - description: the metadata type of the item to return
        explode: true
        in: query
        name: type
        required: true
        schema: {}
        style: form
      responses:
        "200":
          description: The playlist contents
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Retrieve Playlist Contents
      tags:
      - Playlists
    put:
      description: "Adds a generator to a playlist, same parameters as the POST above.\
        \ With a dumb playlist, this adds the specified items to the playlist. \n\
        With a smart playlist, passing a new `uri` parameter replaces the rules for\
        \ the playlist. Returns the playlist.\n"
      operationId: addPlaylistContents
      parameters:
      - description: the ID of the playlist
        explode: false
        in: path
        name: playlistID
        required: true
        schema: {}
        style: simple
      - description: the content URI for the playlist
        explode: true
        in: query
        name: uri
        required: true
        schema:
          example: library://..
        style: form
      - description: the play queue to add to a playlist
        explode: true
        in: query
        name: playQueueID
        required: true
        schema:
          example: 123
        style: form
      responses:
        "200":
          description: Playlist Updated
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Adding to a Playlist
      tags:
      - Playlists
  /playlists/upload:
    post:
      description: |
        Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
      operationId: uploadPlaylist
      parameters:
      - description: "absolute path to a directory on the server where m3u files are\
          \ stored, or the absolute path to a playlist file on the server. \nIf the\
          \ `path` argument is a directory, that path will be scanned for playlist\
          \ files to be processed. \nEach file in that directory creates a separate\
          \ playlist, with a name based on the filename of the file that created it.\
          \ \nThe GUID of each playlist is based on the filename. \nIf the `path`\
          \ argument is a file, that file will be used to create a new playlist, with\
          \ the name based on the filename of the file that created it. \nThe GUID\
          \ of each playlist is based on the filename.\n"
        explode: true
        in: query
        name: path
        required: true
        schema:
          example: /home/barkley/playlist.m3u
        style: form
      - description: "force overwriting of duplicate playlists. By default, a playlist\
          \ file uploaded with the same path will overwrite the existing playlist.\
          \ \nThe `force` argument is used to disable overwriting. If the `force`\
          \ argument is set to 0, a new playlist will be created suffixed with the\
          \ date and time that the duplicate was uploaded.\n"
        explode: true
        in: query
        name: force
        required: true
        schema:
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: The playlist is uploaded
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Upload Playlist
      tags:
      - Playlists
  /search:
    get:
      description: This will search the database for the string provided.
      operationId: getSearchResults
      parameters:
      - description: The search query string to use
        explode: true
        in: query
        name: query
        required: true
        schema:
          example: "110"
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSearchResults_200_response'
          description: Search Results
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Search Results
      tags:
      - Search
  /security/token:
    get:
      description: |
        This endpoint provides the caller with a temporary token with the same access level as the caller's token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
      operationId: getTransientToken
      parameters:
      - description: '`delegation` - This is the only supported `type` parameter.'
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - delegation
        style: form
      - description: '`all` - This is the only supported `scope` parameter.'
        explode: true
        in: query
        name: scope
        required: true
        schema:
          enum:
          - all
        style: form
      responses:
        "200":
          description: A Transient Token
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get a Transient Token.
      tags:
      - Security
  /security/resources:
    get:
      description: |
        If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token.
        Note: requires Plex Media Server >= 1.15.4.
      operationId: getSourceConnectionInformation
      parameters:
      - description: The source identifier with an included prefix.
        explode: true
        in: query
        name: source
        required: true
        schema: {}
        style: form
      responses:
        "200":
          description: Source Connection Information
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Source Connection Information
      tags:
      - Security
  /servers:
    get:
      description: Get Server List
      operationId: getServerList
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerList_200_response'
          description: List of Servers
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Server List
      tags:
      - Server
  /status/sessions:
    get:
      description: This will retrieve the "Now Playing" Information of the PMS.
      operationId: getSessions
      responses:
        "200":
          description: List of Active Plex Sessions
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Active Sessions
      tags:
      - Sessions
  /status/sessions/history/all:
    get:
      description: This will Retrieve a listing of all history views.
      operationId: getSessionHistory
      responses:
        "200":
          description: List of Plex Sessions
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Session History
      tags:
      - Sessions
  /transcode/sessions:
    get:
      description: Get Transcode Sessions
      operationId: getTranscodeSessions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTranscodeSessions_200_response'
          description: The Transcode Sessions
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get Transcode Sessions
      tags:
      - Sessions
  /transcode/sessions/{sessionKey}:
    delete:
      description: Stop a Transcode Session
      operationId: stopTranscodeSession
      parameters:
      - description: the Key of the transcode session to stop
        explode: false
        in: path
        name: sessionKey
        required: true
        schema:
          example: zz7llzqlx8w9vnrsbnwhbmep
        style: simple
      responses:
        "200":
          description: The Transcode Session ended
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Stop a Transcode Session
      tags:
      - Sessions
  /updater/status:
    get:
      description: Querying status of updates
      operationId: getUpdateStatus
      responses:
        "200":
          description: The Server Updates
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Querying status of updates
      tags:
      - Updater
  /updater/check:
    put:
      description: Checking for updates
      operationId: checkForUpdates
      parameters:
      - description: Indicate that you want to start download any updates found.
        example: 1
        explode: true
        in: query
        name: download
        required: false
        schema:
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: ""
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Checking for updates
      tags:
      - Updater
  /updater/apply:
    put:
      description: |
        Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
      operationId: applyUpdates
      parameters:
      - description: Indicate that you want the update to run during the next Butler
          execution. Omitting this or setting it to false indicates that the update
          should install
        example: 1
        explode: true
        in: query
        name: tonight
        required: false
        schema:
          enum:
          - 0
          - 1
        style: form
      - description: Indicate that the latest version should be marked as skipped.
          The <Release> entry for this version will have the `state` set to `skipped`.
        example: 1
        explode: true
        in: query
        name: skip
        required: false
        schema:
          enum:
          - 0
          - 1
        style: form
      responses:
        "200":
          description: If the update process started correctly
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
        "500":
          description: If the update process failed to start
      summary: Apply Updates
      tags:
      - Updater
  /video/:/transcode/universal/start.mpd:
    get:
      description: Begin a Universal Transcode Session
      operationId: startUniversalTranscode
      parameters:
      - description: Whether the media item has MDE
        example: 1
        explode: true
        in: query
        name: hasMDE
        required: true
        schema: {}
        style: form
      - description: The path to the media item to transcode
        example: /library/metadata/23409
        explode: true
        in: query
        name: path
        required: true
        schema: {}
        style: form
      - description: The index of the media item to transcode
        example: 0
        explode: true
        in: query
        name: mediaIndex
        required: true
        schema: {}
        style: form
      - description: The index of the part to transcode
        example: 0
        explode: true
        in: query
        name: partIndex
        required: true
        schema: {}
        style: form
      - description: The protocol to use for the transcode session
        example: hls
        explode: true
        in: query
        name: protocol
        required: true
        schema: {}
        style: form
      - description: Whether to use fast seek or not
        example: 0
        explode: true
        in: query
        name: fastSeek
        required: false
        schema: {}
        style: form
      - description: Whether to use direct play or not
        example: 0
        explode: true
        in: query
        name: directPlay
        required: false
        schema: {}
        style: form
      - description: Whether to use direct stream or not
        example: 0
        explode: true
        in: query
        name: directStream
        required: false
        schema: {}
        style: form
      - description: The size of the subtitles
        example: 100
        explode: true
        in: query
        name: subtitleSize
        required: false
        schema: {}
        style: form
      - description: The subtitles
        example: burn
        explode: true
        in: query
        name: subtites
        required: false
        schema: {}
        style: form
      - description: The audio boost
        example: 100
        explode: true
        in: query
        name: audioBoost
        required: false
        schema: {}
        style: form
      - description: The location of the transcode session
        example: lan
        explode: true
        in: query
        name: location
        required: false
        schema: {}
        style: form
      - description: The size of the media buffer
        example: 102400
        explode: true
        in: query
        name: mediaBufferSize
        required: false
        schema: {}
        style: form
      - description: The session ID
        example: zvcage8b7rkioqcm8f4uns4c
        explode: true
        in: query
        name: session
        required: false
        schema: {}
        style: form
      - description: Whether to add a debug overlay or not
        example: 0
        explode: true
        in: query
        name: addDebugOverlay
        required: false
        schema: {}
        style: form
      - description: Whether to auto adjust quality or not
        example: 0
        explode: true
        in: query
        name: autoAdjustQuality
        required: false
        schema: {}
        style: form
      responses:
        "200":
          description: The transcode session has started
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Start Universal Transcode
      tags:
      - Video
  /:/timeline:
    get:
      description: Get the timeline for a media item
      operationId: getTimeline
      parameters:
      - description: The rating key of the media item
        example: 23409
        explode: true
        in: query
        name: ratingKey
        required: true
        schema: {}
        style: form
      - description: The key of the media item to get the timeline for
        example: /library/metadata/23409
        explode: true
        in: query
        name: key
        required: true
        schema: {}
        style: form
      - description: The state of the media item
        example: playing
        explode: true
        in: query
        name: state
        required: true
        schema:
          enum:
          - playing
          - paused
          - stopped
        style: form
      - description: Whether the media item has MDE
        example: 1
        explode: true
        in: query
        name: hasMDE
        required: true
        schema: {}
        style: form
      - description: The time of the media item
        example: 2000
        explode: true
        in: query
        name: time
        required: true
        schema: {}
        style: form
      - description: The duration of the media item
        example: 10000
        explode: true
        in: query
        name: duration
        required: true
        schema: {}
        style: form
      - description: The context of the media item
        example: home:hub.continueWatching
        explode: true
        in: query
        name: context
        required: true
        schema: {}
        style: form
      - description: The play queue item ID of the media item
        example: 1
        explode: true
        in: query
        name: playQueueItemID
        required: true
        schema: {}
        style: form
      - description: The playback time of the media item
        example: 2000
        explode: true
        in: query
        name: playBackTime
        required: true
        schema: {}
        style: form
      - description: The row of the media item
        example: 1
        explode: true
        in: query
        name: row
        required: true
        schema: {}
        style: form
      responses:
        "200":
          description: The timeline for the media item
        "400":
          description: "Bad Request - A parameter was not specified, or was specified\
            \ incorrectly."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getServerCapabilities_401_response'
          description: Unauthorized - Returned if the X-Plex-Token is missing from
            the header or query.
      summary: Get the timeline for a media item
      tags:
      - Video
components:
  schemas:
    getServerCapabilities_200_response:
      example:
        MediaContainer:
          transcoderSubtitles: ""
          readOnlyLibraries: ""
          photoAutoTag: ""
          myPlexMappingState: ""
          transcoderVideoQualities: ""
          allowCameraUpload: ""
          pluginHost: ""
          multiuser: ""
          allowSharing: ""
          myPlexUsername: ""
          updatedAt: ""
          myPlexSubscription: ""
          livetv: ""
          allowSync: ""
          sync: ""
          version: ""
          itemClusters: ""
          transcoderLyrics: ""
          ownerFeatures: ""
          transcoderVideoResolutions: ""
          allowChannelAccess: ""
          size: ""
          myPlex: ""
          musicAnalysis: ""
          companionProxy: ""
          transcoderVideo: ""
          hubSearch: ""
          allowMediaDeletion: ""
          allowTuners: ""
          certificate: ""
          myPlexSigninState: ""
          platform: ""
          transcoderAudio: ""
          updater: ""
          transcoderPhoto: ""
          streamingBrainABRVersion: ""
          countryCode: ""
          platformVersion: ""
          eventStream: ""
          friendlyName: ""
          Directory: ""
          machineIdentifier: ""
          backgroundProcessing: ""
          voiceSearch: ""
          offlineTranscode: ""
          streamingBrainVersion: ""
          mediaProviders: ""
          transcoderVideoBitrates: ""
          diagnostics: ""
          pushNotifications: ""
          transcoderActiveVideoSessions: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getServerCapabilities_200_response_MediaContainer'
    getRecentlyAdded_200_response:
      example:
        MediaContainer:
          mediaTagPrefix: /system/bundle/media/flags/
          identifier: com.plexapp.plugins.library
          size: 50
          allowSync: ""
          Metadata: ""
          mediaTagVersion: 1680021154
          mixedParents: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getRecentlyAdded_200_response_MediaContainer'
    getServerList_200_response:
      example:
        MediaContainer:
          size: 1
          Server: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getServerList_200_response_MediaContainer'
    getSearchResults_200_response_MediaContainer:
      example:
        mediaTagPrefix: /system/bundle/media/flags/
        identifier: com.plexapp.plugins.library
        size: 26
        Metadata: ""
        mediaTagVersion: 1680021154
        Provider: ""
      properties:
        size:
          example: 26
        identifier:
          example: com.plexapp.plugins.library
        mediaTagPrefix:
          example: /system/bundle/media/flags/
        mediaTagVersion:
          example: 1680021154
        Metadata:
          items:
            properties:
              allowSync: {}
              librarySectionID:
                example: 1
              librarySectionTitle:
                example: Movies
              librarySectionUUID:
                example: 322a231a-b7f7-49f5-920f-14c61199cd30
              personal: {}
              sourceTitle:
                example: Hera
              ratingKey:
                example: 10398
              key:
                example: /library/metadata/10398
              guid:
                example: plex://movie/5d7768284de0ee001fcc8f52
              studio:
                example: Paramount
              type:
                example: movie
              title:
                example: "Mission: Impossible"
              contentRating:
                example: PG-13
              summary:
                example: When Ethan Hunt the leader of a crack espionage team whose
                  perilous operation has gone awry with no explanation discovers that
                  a mole has penetrated the CIA he's surprised to learn that he's
                  the No. 1 suspect. To clear his name Hunt now must ferret out the
                  real double agent and in the process even the score.
              rating:
                example: 6.6
              audienceRating:
                example: 7.1
              year:
                example: 1996
              tagline:
                example: Expect the impossible.
              thumb:
                example: /library/metadata/10398/thumb/1679505055
              art:
                example: /library/metadata/10398/art/1679505055
              duration:
                example: 6612628
              originallyAvailableAt:
                example: 1996-05-22
                format: date
              addedAt:
                example: 1589234571
              updatedAt:
                example: 1679505055
              audienceRatingImage:
                example: rottentomatoes://image.rating.upright
              chapterSource:
                example: media
              primaryExtraKey:
                example: /library/metadata/10501
              ratingImage:
                example: rottentomatoes://image.rating.ripe
              Media:
                items:
                  properties:
                    id:
                      example: 26610
                    duration:
                      example: 6612628
                    bitrate:
                      example: 4751
                    width:
                      example: 1916
                    height:
                      example: 796
                    aspectRatio:
                      example: 2.35
                    audioChannels:
                      example: 6
                    audioCodec:
                      example: aac
                    videoCodec:
                      example: hevc
                    videoResolution:
                      example: 1080
                    container:
                      example: mkv
                    videoFrameRate:
                      example: 24p
                    audioProfile:
                      example: lc
                    videoProfile:
                      example: main 10
                    Part:
                      items:
                        properties:
                          id:
                            example: 26610
                          key:
                            example: /library/parts/26610/1589234571/file.mkv
                          duration:
                            example: 6612628
                          file:
                            example: /movies/Mission Impossible (1996)/Mission Impossible
                              (1996) Bluray-1080p.mkv
                          size:
                            example: 3926903851
                          audioProfile:
                            example: lc
                          container:
                            example: mkv
                          videoProfile:
                            example: main 10
              Genre:
                items:
                  properties:
                    tag:
                      example: Action
              Director:
                items:
                  properties:
                    tag:
                      example: Brian De Palma
              Writer:
                items:
                  properties:
                    tag:
                      example: David Koepp
              Country:
                items:
                  properties:
                    tag:
                      example: United States of America
              Role:
                items:
                  properties:
                    tag:
                      example: Tom Cruise
        Provider:
          items:
            properties:
              key:
                example: /system/search
              title:
                example: Local Network
              type:
                example: mixed
    getDevices_200_response_MediaContainer:
      example:
        identifier: com.plexapp.system.devices
        size: 151
        Device: ""
      properties:
        size:
          example: 151
        identifier:
          example: com.plexapp.system.devices
        Device:
          items:
            properties:
              id:
                example: 1
              name:
                example: iPhone
              platform:
                example: iOS
              clientIdentifier: {}
              createdAt:
                example: 1654131230
    getOnDeck_200_response:
      example:
        MediaContainer:
          mediaTagPrefix: /system/bundle/media/flags/
          identifier: com.plexapp.plugins.library
          size: 16
          allowSync: ""
          Metadata: ""
          mediaTagVersion: 1680021154
          mixedParents: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getOnDeck_200_response_MediaContainer'
    getServerIdentity_200_response:
      example:
        MediaContainer:
          size: 0
          machineIdentifier: 96f2fe7a78c9dc1f16a16bedbe90f98149be16b4
          claimed: ""
          version: 1.31.3.6868-28fc46b27
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getServerIdentity_200_response_MediaContainer'
    getRecentlyAdded_200_response_MediaContainer:
      example:
        mediaTagPrefix: /system/bundle/media/flags/
        identifier: com.plexapp.plugins.library
        size: 50
        allowSync: ""
        Metadata: ""
        mediaTagVersion: 1680021154
        mixedParents: ""
      properties:
        size:
          example: 50
        allowSync: {}
        identifier:
          example: com.plexapp.plugins.library
        mediaTagPrefix:
          example: /system/bundle/media/flags/
        mediaTagVersion:
          example: 1680021154
        mixedParents: {}
        Metadata:
          items:
            properties:
              allowSync: {}
              librarySectionID:
                example: 1
              librarySectionTitle:
                example: Movies
              librarySectionUUID:
                example: 322a231a-b7f7-49f5-920f-14c61199cd30
              ratingKey:
                example: 59398
              key:
                example: /library/metadata/59398
              guid:
                example: plex://movie/5e161a83bea6ac004126e148
              studio:
                example: Marvel Studios
              type:
                example: movie
              title:
                example: "Ant-Man and the Wasp: Quantumania"
              contentRating:
                example: PG-13
              summary:
                example: Scott Lang and Hope Van Dyne along with Hank Pym and Janet
                  Van Dyne explore the Quantum Realm where they interact with strange
                  creatures and embark on an adventure that goes beyond the limits
                  of what they thought was possible.
              rating:
                example: 4.7
              audienceRating:
                example: 8.3
              year:
                example: 2023
              tagline:
                example: Witness the beginning of a new dynasty.
              thumb:
                example: /library/metadata/59398/thumb/1681888010
              art:
                example: /library/metadata/59398/art/1681888010
              duration:
                example: 7474422
              originallyAvailableAt:
                example: 2023-02-15
                format: date
              addedAt:
                example: 1681803215
              updatedAt:
                example: 1681888010
              audienceRatingImage:
                example: rottentomatoes://image.rating.upright
              chapterSource:
                example: media
              primaryExtraKey:
                example: /library/metadata/59399
              ratingImage:
                example: rottentomatoes://image.rating.rotten
              Media:
                items:
                  properties:
                    id:
                      example: 120345
                    duration:
                      example: 7474422
                    bitrate:
                      example: 3623
                    width:
                      example: 1920
                    height:
                      example: 804
                    aspectRatio:
                      example: 2.35
                    audioChannels:
                      example: 6
                    audioCodec:
                      example: ac3
                    videoCodec:
                      example: h264
                    videoResolution:
                      example: 1080
                    container:
                      example: mp4
                    videoFrameRate:
                      example: 24p
                    optimizedForStreaming:
                      example: 0
                    has64bitOffsets: {}
                    videoProfile:
                      example: high
                    Part:
                      items:
                        properties:
                          id:
                            example: 120353
                          key:
                            example: /library/parts/120353/1681803203/file.mp4
                          duration:
                            example: 7474422
                          file:
                            example: /movies/Ant-Man and the Wasp Quantumania (2023)/Ant-Man.and.the.Wasp.Quantumania.2023.1080p.mp4
                          size:
                            example: 3395307162
                          container:
                            example: mp4
                          has64bitOffsets: {}
                          hasThumbnail:
                            example: 1
                          optimizedForStreaming: {}
                          videoProfile:
                            example: high
              Genre:
                items:
                  properties:
                    tag:
                      example: Comedy
              Director:
                items:
                  properties:
                    tag:
                      example: Peyton Reed
              Writer:
                items:
                  properties:
                    tag:
                      example: Jeff Loveness
              Country:
                items:
                  properties:
                    tag:
                      example: United States of America
              Role:
                items:
                  properties:
                    tag:
                      example: Paul Rudd
    getButlerTasks_200_response_ButlerTasks:
      example:
        ButlerTask: ""
      properties:
        ButlerTask:
          items:
            properties:
              name:
                example: BackupDatabase
              interval:
                example: 3
              scheduleRandomized: {}
              enabled: {}
              title:
                example: Backup Database
              description:
                example: Create a backup copy of the server's database in the configured
                  backup directory
    getMyPlexAccount_200_response:
      example:
        MyPlex:
          mappingError: ""
          mappingState: mapped
          privateAddress: 10.10.10.47
          signInState: ok
          privatePort: 32400
          authToken: Z5v-PrNASDFpsaCi3CPK7
          publicPort: 32400
          subscriptionState: Active
          publicAddress: 140.20.68.140
          subscriptionActive: ""
          username: example.email@mail.com
          subscriptionFeatures: "federated-auth,hardware_transcoding,home,hwtranscode,item_clusters,kevin-bacon,livetv,loudness,lyrics,music-analysis,music_videos,pass,photo_autotags,photos-v5,photosV6-edit,photosV6-tv-albums,premium_music_metadata,radio,server-manager,session_bandwidth_restrictions,session_kick,shared-radio,sync,trailers,tuner-sharing,type-first,unsupportedtuners,webhooks"
      properties:
        MyPlex:
          $ref: '#/components/schemas/getMyPlexAccount_200_response_MyPlex'
    getServerList_200_response_MediaContainer:
      example:
        size: 1
        Server: ""
      properties:
        size:
          example: 1
        Server:
          items:
            properties:
              name:
                example: Hera
              host:
                example: 10.10.10.47
              address:
                example: 10.10.10.47
              port:
                example: 32400
              machineIdentifier:
                example: 96f2fe7a78c9dc1f16a16bedbe90f98149be16b4
              version:
                example: 1.31.3.6868-28fc46b27
    getDevices_200_response:
      example:
        MediaContainer:
          identifier: com.plexapp.system.devices
          size: 151
          Device: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getDevices_200_response_MediaContainer'
    getServerCapabilities_401_response:
      properties:
        errors:
          items:
            properties:
              code:
                example: 1001
              message:
                example: User could not be authenticated
              status:
                example: 401
    getTranscodeSessions_200_response:
      example:
        MediaContainer:
          size: 1
          TranscodeSession: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getTranscodeSessions_200_response_MediaContainer'
    getServerActivities_200_response:
      example:
        MediaContainer:
          size: ""
          Activity: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getServerActivities_200_response_MediaContainer'
    getOnDeck_200_response_MediaContainer:
      example:
        mediaTagPrefix: /system/bundle/media/flags/
        identifier: com.plexapp.plugins.library
        size: 16
        allowSync: ""
        Metadata: ""
        mediaTagVersion: 1680021154
        mixedParents: ""
      properties:
        size:
          example: 16
        allowSync: {}
        identifier:
          example: com.plexapp.plugins.library
        mediaTagPrefix:
          example: /system/bundle/media/flags/
        mediaTagVersion:
          example: 1680021154
        mixedParents: {}
        Metadata:
          items:
            properties:
              allowSync: {}
              librarySectionID:
                example: 2
              librarySectionTitle:
                example: TV Shows
              librarySectionUUID:
                example: 4bb2521c-8ba9-459b-aaee-8ab8bc35eabd
              ratingKey:
                example: 49564
              key:
                example: /library/metadata/49564
              parentRatingKey:
                example: 49557
              grandparentRatingKey:
                example: 49556
              guid:
                example: plex://episode/5ea7d7402e7ab10042e74d4f
              parentGuid:
                example: plex://season/602e754d67f4c8002ce54b3d
              grandparentGuid:
                example: plex://show/5d9c090e705e7a001e6e94d8
              type:
                example: episode
              title:
                example: Circus
              grandparentKey:
                example: /library/metadata/49556
              parentKey:
                example: /library/metadata/49557
              librarySectionKey:
                example: /library/sections/2
              grandparentTitle:
                example: Bluey (2018)
              parentTitle:
                example: Season 2
              contentRating:
                example: TV-Y
              summary:
                example: Bluey is the ringmaster in a game of circus with her friends
                  but Hercules wants to play his motorcycle game instead. Luckily
                  Bluey has a solution to keep everyone happy.
              index:
                example: 33
              parentIndex:
                example: 2
              lastViewedAt:
                example: 1681908352
              year:
                example: 2018
              thumb:
                example: /library/metadata/49564/thumb/1654258204
              art:
                example: /library/metadata/49556/art/1680939546
              parentThumb:
                example: /library/metadata/49557/thumb/1654258204
              grandparentThumb:
                example: /library/metadata/49556/thumb/1680939546
              grandparentArt:
                example: /library/metadata/49556/art/1680939546
              grandparentTheme:
                example: /library/metadata/49556/theme/1680939546
              duration:
                example: 420080
              originallyAvailableAt:
                example: 2020-10-31
                format: date
              addedAt:
                example: 1654258196
              updatedAt:
                example: 1654258204
              Media:
                items:
                  properties:
                    id:
                      example: 80994
                    duration:
                      example: 420080
                    bitrate:
                      example: 1046
                    width:
                      example: 1920
                    height:
                      example: 1080
                    aspectRatio:
                      example: 1.78
                    audioChannels:
                      example: 2
                    audioCodec:
                      example: aac
                    videoCodec:
                      example: hevc
                    videoResolution:
                      example: "1080"
                    container:
                      example: mkv
                    videoFrameRate:
                      example: PAL
                    audioProfile:
                      example: lc
                    videoProfile:
                      example: main
                    Part:
                      items:
                        properties:
                          id:
                            example: 80994
                          key:
                            example: /library/parts/80994/1655007810/file.mkv
                          duration:
                            example: 420080
                          file:
                            example: /tvshows/Bluey (2018)/Bluey (2018) - S02E33 -
                              Circus.mkv
                          size:
                            example: 55148931
                          audioProfile:
                            example: lc
                          container:
                            example: mkv
                          videoProfile:
                            example: main
                          Stream:
                            items:
                              properties:
                                id:
                                  example: 211234
                                streamType:
                                  example: 1
                                default: {}
                                codec:
                                  example: hevc
                                index:
                                  example: 0
                                bitrate:
                                  example: 918
                                language:
                                  example: English
                                languageTag:
                                  example: en
                                languageCode:
                                  example: eng
                                bitDepth:
                                  example: 8
                                chromaLocation:
                                  example: left
                                chromaSubsampling:
                                  example: 4:2:0
                                codedHeight:
                                  example: 1080
                                codedWidth:
                                  example: 1920
                                colorRange:
                                  example: tv
                                frameRate:
                                  example: 25
                                height:
                                  example: 1080
                                level:
                                  example: 120
                                profile:
                                  example: main
                                refFrames:
                                  example: 1
                                width:
                                  example: 1920
                                displayTitle:
                                  example: 1080p (HEVC Main)
                                extendedDisplayTitle:
                                  example: 1080p (HEVC Main)
              Guid:
                items:
                  properties:
                    id:
                      example: imdb://tt13303712
    getServerCapabilities_200_response_MediaContainer:
      example:
        transcoderSubtitles: ""
        readOnlyLibraries: ""
        photoAutoTag: ""
        myPlexMappingState: ""
        transcoderVideoQualities: ""
        allowCameraUpload: ""
        pluginHost: ""
        multiuser: ""
        allowSharing: ""
        myPlexUsername: ""
        updatedAt: ""
        myPlexSubscription: ""
        livetv: ""
        allowSync: ""
        sync: ""
        version: ""
        itemClusters: ""
        transcoderLyrics: ""
        ownerFeatures: ""
        transcoderVideoResolutions: ""
        allowChannelAccess: ""
        size: ""
        myPlex: ""
        musicAnalysis: ""
        companionProxy: ""
        transcoderVideo: ""
        hubSearch: ""
        allowMediaDeletion: ""
        allowTuners: ""
        certificate: ""
        myPlexSigninState: ""
        platform: ""
        transcoderAudio: ""
        updater: ""
        transcoderPhoto: ""
        streamingBrainABRVersion: ""
        countryCode: ""
        platformVersion: ""
        eventStream: ""
        friendlyName: ""
        Directory: ""
        machineIdentifier: ""
        backgroundProcessing: ""
        voiceSearch: ""
        offlineTranscode: ""
        streamingBrainVersion: ""
        mediaProviders: ""
        transcoderVideoBitrates: ""
        diagnostics: ""
        pushNotifications: ""
        transcoderActiveVideoSessions: ""
      properties:
        size: {}
        allowCameraUpload: {}
        allowChannelAccess: {}
        allowMediaDeletion: {}
        allowSharing: {}
        allowSync: {}
        allowTuners: {}
        backgroundProcessing: {}
        certificate: {}
        companionProxy: {}
        countryCode: {}
        diagnostics: {}
        eventStream: {}
        friendlyName: {}
        hubSearch: {}
        itemClusters: {}
        livetv: {}
        machineIdentifier: {}
        mediaProviders: {}
        multiuser: {}
        musicAnalysis: {}
        myPlex: {}
        myPlexMappingState: {}
        myPlexSigninState: {}
        myPlexSubscription: {}
        myPlexUsername: {}
        offlineTranscode: {}
        ownerFeatures: {}
        photoAutoTag: {}
        platform: {}
        platformVersion: {}
        pluginHost: {}
        pushNotifications: {}
        readOnlyLibraries: {}
        streamingBrainABRVersion: {}
        streamingBrainVersion: {}
        sync: {}
        transcoderActiveVideoSessions: {}
        transcoderAudio: {}
        transcoderLyrics: {}
        transcoderPhoto: {}
        transcoderSubtitles: {}
        transcoderVideo: {}
        transcoderVideoBitrates: {}
        transcoderVideoQualities: {}
        transcoderVideoResolutions: {}
        updatedAt: {}
        updater: {}
        version: {}
        voiceSearch: {}
        Directory:
          items:
            properties:
              count: {}
              key: {}
              title: {}
    getTranscodeSessions_200_response_MediaContainer:
      example:
        size: 1
        TranscodeSession: ""
      properties:
        size:
          example: 1
        TranscodeSession:
          items:
            properties:
              key:
                example: zz7llzqlx8w9vnrsbnwhbmep
              throttled: {}
              complete: {}
              progress:
                example: 0.4000000059604645
              size:
                example: -22
              speed:
                example: 22.399999618530273
              error: {}
              duration:
                example: 2561768
              context:
                example: streaming
              sourceVideoCodec:
                example: h264
              sourceAudioCodec:
                example: ac3
              videoDecision:
                example: transcode
              audioDecision:
                example: transcode
              protocol:
                example: http
              container:
                example: mkv
              videoCodec:
                example: h264
              audioCodec:
                example: opus
              audioChannels:
                example: 2
              transcodeHwRequested: {}
              timeStamp:
                example: 1681869535.7764285
              maxOffsetAvailable:
                example: 861.778
              minOffsetAvailable:
                example: 0
    getButlerTasks_200_response:
      example:
        ButlerTasks:
          ButlerTask: ""
      properties:
        ButlerTasks:
          $ref: '#/components/schemas/getButlerTasks_200_response_ButlerTasks'
    getMyPlexAccount_200_response_MyPlex:
      example:
        mappingError: ""
        mappingState: mapped
        privateAddress: 10.10.10.47
        signInState: ok
        privatePort: 32400
        authToken: Z5v-PrNASDFpsaCi3CPK7
        publicPort: 32400
        subscriptionState: Active
        publicAddress: 140.20.68.140
        subscriptionActive: ""
        username: example.email@mail.com
        subscriptionFeatures: "federated-auth,hardware_transcoding,home,hwtranscode,item_clusters,kevin-bacon,livetv,loudness,lyrics,music-analysis,music_videos,pass,photo_autotags,photos-v5,photosV6-edit,photosV6-tv-albums,premium_music_metadata,radio,server-manager,session_bandwidth_restrictions,session_kick,shared-radio,sync,trailers,tuner-sharing,type-first,unsupportedtuners,webhooks"
      properties:
        authToken:
          example: Z5v-PrNASDFpsaCi3CPK7
        username:
          example: example.email@mail.com
        mappingState:
          example: mapped
        mappingError: {}
        signInState:
          example: ok
        publicAddress:
          example: 140.20.68.140
        publicPort:
          example: 32400
        privateAddress:
          example: 10.10.10.47
        privatePort:
          example: 32400
        subscriptionFeatures:
          example: "federated-auth,hardware_transcoding,home,hwtranscode,item_clusters,kevin-bacon,livetv,loudness,lyrics,music-analysis,music_videos,pass,photo_autotags,photos-v5,photosV6-edit,photosV6-tv-albums,premium_music_metadata,radio,server-manager,session_bandwidth_restrictions,session_kick,shared-radio,sync,trailers,tuner-sharing,type-first,unsupportedtuners,webhooks"
        subscriptionActive: {}
        subscriptionState:
          example: Active
    getServerActivities_200_response_MediaContainer:
      example:
        size: ""
        Activity: ""
      properties:
        size: {}
        Activity:
          items:
            properties:
              uuid: {}
              type: {}
              cancellable: {}
              userID: {}
              title: {}
              subtitle: {}
              progress: {}
              Context:
                properties:
                  librarySectionID: {}
    getSearchResults_200_response:
      example:
        MediaContainer:
          mediaTagPrefix: /system/bundle/media/flags/
          identifier: com.plexapp.plugins.library
          size: 26
          Metadata: ""
          mediaTagVersion: 1680021154
          Provider: ""
      properties:
        MediaContainer:
          $ref: '#/components/schemas/getSearchResults_200_response_MediaContainer'
    getServerIdentity_200_response_MediaContainer:
      example:
        size: 0
        machineIdentifier: 96f2fe7a78c9dc1f16a16bedbe90f98149be16b4
        claimed: ""
        version: 1.31.3.6868-28fc46b27
      properties:
        size:
          example: 0
        claimed: {}
        machineIdentifier:
          example: 96f2fe7a78c9dc1f16a16bedbe90f98149be16b4
        version:
          example: 1.31.3.6868-28fc46b27
  securitySchemes:
    accessToken:
      description: Plex Authentication Token
      in: header
      name: X-Plex-Token
      type: apiKey
