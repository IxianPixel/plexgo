/*
Plex-API

Testing PlaylistsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pms

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/lukehagar/plexgo"
)

func Test_pms_PlaylistsApiService(t *testing.T) {

	configuration := openapiclient.NewDefaultConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlaylistsApiService AddPlaylistContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playlistID interface{}

		httpRes, err := apiClient.PMS.PlaylistsApi.AddPlaylistContents(context.Background(), playlistID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService ClearPlaylistContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playlistID interface{}

		httpRes, err := apiClient.PMS.PlaylistsApi.ClearPlaylistContents(context.Background(), playlistID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService CreatePlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PMS.PlaylistsApi.CreatePlaylist(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService DeletePlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playlistID interface{}

		httpRes, err := apiClient.PMS.PlaylistsApi.DeletePlaylist(context.Background(), playlistID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService GetPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playlistID interface{}

		httpRes, err := apiClient.PMS.PlaylistsApi.GetPlaylist(context.Background(), playlistID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService GetPlaylistContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playlistID interface{}

		httpRes, err := apiClient.PMS.PlaylistsApi.GetPlaylistContents(context.Background(), playlistID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService GetPlaylists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PMS.PlaylistsApi.GetPlaylists(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService UpdatePlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playlistID interface{}

		httpRes, err := apiClient.PMS.PlaylistsApi.UpdatePlaylist(context.Background(), playlistID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaylistsApiService UploadPlaylist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PMS.PlaylistsApi.UploadPlaylist(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
